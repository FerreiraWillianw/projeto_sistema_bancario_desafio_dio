# -*- coding: utf-8 -*-
"""sistema_bancario_complexo.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kz-b4tsgBTBrD9vDjdSsz7_PbSpHA0co
"""

import textwrap

class Cliente:
    """
    Classe para o Cliente..
    """
    def __init__(self, nome, data_nascimento, cpf, endereco):
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf
        self.endereco = endereco

        # O Cliente "tem" uma lista de contas.
        self.contas = []

    def adicionar_conta(self, conta):
        # Um método simples para ligar o cliente à sua conta
        self.contas.append(conta)

class ContaCorrente:
    """
    Classe que centraliza toda a lógica da conta.
    """
    def __init__(self, numero, cliente):
        self.saldo = 0
        self.numero = numero
        self.agencia = "0001"
        self.cliente = cliente # Guarda o objeto Cliente

        # Lógica do extrato procedural, mas dentro da classe
        self.extrato = ""

        # Regras de negócio guardadas no próprio objeto
        self.numero_saques = 0
        self.limite_saques = 3
        self.limite_por_saque = 500

    def depositar(self, valor):
        """
        Método para depositar:
        Se o valor for válido, atualiza o saldo e o extrato.
        """
        if valor > 0:
            self.saldo += valor
            self.extrato += f"Depósito:\tR$ {valor:.2f}\n"
            print("\n Depósito realizado com sucesso!")
            return True
        else:
            print("\n@@@ Operação falhou! O valor informado é inválido! @@@")
            return False

    def sacar(self, valor):
        """
        Método para sacar.
        """
        excedeu_saldo = valor > self.saldo
        excedeu_limite = valor > self.limite_por_saque
        excedeu_saques = self.numero_saques >= self.limite_saques

        if excedeu_saldo:
            print("\n@@@ Operação falhou! Você não tem saldo suficiente. @@@")
        elif excedeu_limite:
            print("\n@@@ Operação falhou! O valor do saque excede o limite. @@@")
        elif excedeu_saques:
            print("\n@@@ Operação falhou! Número máximo de saques excedido. @@@")
        elif valor > 0:
            self.saldo -= valor
            self.extrato += f"Saque:\t\tR$ {valor:.2f}\n"
            self.numero_saques += 1
            print("\n Saque realizado com sucesso!")
            return True
        else:
            print("\n@@@ Operação falhou! O valor informado é inválido! @@@")

        return False

    def exibir_extrato(self):
        """
        Método que exibe o extrato da própria conta.
        """
        print("\n=============== EXTRATO ===============")
        print("Não foram realizadas movimentações." if not self.extrato else self.extrato)
        print(f"\nSaldo:\t\tR$ {self.saldo:.2f}")
        print("=======================================")

# ==============================================================================
# 2. FUNÇÕES DE FLUXO (A "Interface")
# ==============================================================================

def menu():
    menu = """\n
    ——————————————— MENU ———————————————
    [d]\tDepositar
    [s]\tSacar
    [e]\tExtrato
    [nc]\tNova conta
    [lc]\tListar contas
    [nu]\tNovo usuário
    [q]\tSair
    → """
    return input(textwrap.dedent(menu))

def filtrar_cliente(cpf, clientes):
    # Procura um objeto Cliente na lista 'clientes' pelo seu atributo 'cpf'
    for cliente in clientes:
        if cliente.cpf == cpf:
            return cliente
    return None

def recuperar_conta_cliente(cliente):
    # Pega o objeto Cliente e retorna o primeiro objeto Conta da sua lista
    if not cliente.contas:
        print("\n@@@ Cliente não possui conta! @@@")
        return None

    # retorna a primeira conta
    return cliente.contas[0]

def depositar(clientes):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes) # Pega o OBJETO Cliente

    if not cliente:
        print("\n@@@ Cliente não encontrado! @@@")
        return

    conta = recuperar_conta_cliente(cliente) # Pega o OBJETO Conta
    if not conta:
        return

    valor = float(input("Informe o valor do depósito: "))

    # Chamada direta ao método do objeto
    conta.depositar(valor)

def sacar(clientes):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes) # Pega o OBJETO Cliente

    if not cliente:
        print("\n@@@ Cliente não encontrado! @@@")
        return

    conta = recuperar_conta_cliente(cliente) # Pega o OBJETO Conta
    if not conta:
        return

    valor = float(input("Informe o valor do saque: "))

    # Chamada direta ao método do objeto
    conta.sacar(valor)

def exibir_extrato(clientes):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes) # Pega o OBJETO Cliente

    if not cliente:
        print("\n@@@ Cliente não encontrado! @@@")
        return

    conta = recuperar_conta_cliente(cliente) # Pega o OBJETO Conta
    if not conta:
        return

    # A conta é responsável por mostrar seu próprio extrato
    conta.exibir_extrato()

def criar_cliente(clientes):
    cpf = input("Informe o CPF (somente número): ")
    cliente = filtrar_cliente(cpf, clientes)

    if cliente:
        print("\n@@@ Já existe cliente com esse CPF! @@@")
        return

    nome = input("Informe o nome completo: ")
    data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
    endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): ")

    # Cria o OBJETO Cliente
    novo_cliente = Cliente(nome=nome, data_nascimento=data_nascimento, cpf=cpf, endereco=endereco)

    # Adiciona o OBJETO à lista
    clientes.append(novo_cliente)

    print("\n=== Cliente criado com sucesso! ===")

def criar_conta(numero_conta, clientes, contas):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes) # Pega o OBJETO Cliente

    if not cliente:
        print("\n@@@ Cliente não encontrado! @@@")
        return

    # Cria o OBJETO ContaCorrente
    nova_conta = ContaCorrente(numero=numero_conta, cliente=cliente)

    # Adiciona o objeto às listas
    contas.append(nova_conta)
    cliente.adicionar_conta(nova_conta) # Liga o cliente à conta

    print("\n=== Conta criada com sucesso! ===")

def listar_contas(contas):
    for conta in contas:
        # Formata os dados da conta (todos públicos)
        linha = f"""\
            Agência:\t{conta.agencia}
            C/C:\t\t{conta.numero}
            Titular:\t{conta.cliente.nome}
        """
        # (Note que acessamos conta.cliente.nome para pegar o nome)
        print("=" * 100)
        print(textwrap.dedent(linha))

# ==============================================================================
# 3. FUNÇÃO PRINCIPAL (MAIN)
# ==============================================================================

def main():
    # As listas agora guardam OBJETOS, não mais variáveis soltas
    clientes = []
    contas = []

    while True:
        opcao = menu()

        if opcao == "d":
            depositar(clientes)
        elif opcao == "s":
            sacar(clientes)
        elif opcao == "e":
            exibir_extrato(clientes)
        elif opcao == "nu":
            criar_cliente(clientes)
        elif opcao == "nc":
            numero_conta = len(contas) + 1
            criar_conta(numero_conta, clientes, contas)
        elif opcao == "lc":
            listar_contas(contas)
        elif opcao == "q":
            break
        else:
            print("\n@@@ Operação inválida, por favor selecione novamente a operação desejada. @@@")

# Executa o programa
main()